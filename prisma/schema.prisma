generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  Phone     String?
  address   String?
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  Parent    Parent?  @relation(fields: [parentId], references: [id])
  parentId  String?
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  gradeId   Int
  grade     Grade    @relation(fields: [gradeId], references: [id])
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  Phone     String?
  address   String?
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  Phone     String?
  address   String?
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    String    @unique
  students Student[]
  classes  Class[]
}

model Class {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  capacity     Int
  supervisorId String
  supervisor   Teacher   @relation(fields: [supervisorId], references: [id])
  lessons      Lesson[]
  students     Student[]
  gradeId      Int
  grade        Grade     @relation(fields: [gradeId], references: [id])
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  teachers  Teacher[]
  lessons   Lesson[]

  // Teacher   Teacher? @relation(fields: [teacherId], references: [id])
  // teacherId String?
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  starttime DateTime
  endtime   DateTime
  subjectId Int

  Subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  endDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int
  exam         Exam       @relation(fields: [examId], references: [id])
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
}

// model Attendance {}
// model Event {}
// model Announcement {}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
